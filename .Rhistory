"input\\$alpha" = as.character(input$alpha),
"input\\$se" = as.character(input$se),
"input\\$smooth" = as.character(input$smooth),
"input\\$CI" = as.character(input$CI),
"input\\$size_jitter" = as.character(input$size_jitter),
"input\\$width_jitter" = as.character(input$width_jitter),
"input\\$opac_jitter" = as.character(input$opac_jitter),
"input\\$col_jitter" = as.character(input$col_jitter),
"input\\$lab_x" = as.character(input$lab_x),
"input\\$lab_y" = as.character(input$lab_y),
"input\\$title" = as.character(input$title),
"input\\$palet" = as.character(input$palet),
"input\\$fnt_sz_ttl" = as.character(input$fnt_sz_ttl),
"input\\$fnt_sz_ax" = as.character(input$fnt_sz_ax),
"input\\$font" = as.character(input$font),
"input\\$leg_ttl" = as.character(input$leg_ttl),
"input\\$pos_leg" = as.character(input$pos_leg))
)
# Creates well-formatted R-code for output
p <- str_replace_all(p, ",\n    \\)", "\n  \\)")
p
})
#####################################
###### GRAPHICAL/TABLE OUTPUT #######
#####################################
output$out_table <- DT::renderDT(
df_shiny()
)
width <- reactive ({ input$fig_width })
height <- reactive ({ input$fig_height })
width_download <- reactive ({ input$fig_width_download })
height_download <- reactive ({ input$fig_height_download })
output$out_ggplot <- renderPlot(width = width,
height = height, {
# evaluate the string RCode as code
df <- df_shiny()
p <- eval(parse(text = string_code()))
p
})
output$out_plotly <- renderPlotly({
# evaluate the string RCode as code
df <- df_shiny()
p <- eval(parse(text = string_code()))
ggplotly(p)
})
#####################################
#### GENERATE R-CODE FOR OUTPUT #####
#####################################
output$out_r_code <- renderText({
gg_code <- string_code()
gg_code <- str_replace_all(gg_code, "\\+ ", "+\n  ")
paste(
"## You can use the below code to generate the graph.\n",
"## Don't forget to replace the 'df' with the name\n",
"## of your dataframe\n\n",
"# You need the following package(s):\n",
"library(\"ggplot2\")\n\n",
"# The code below will generate the graph:\n",
"graph <- ",
gg_code,
"\ngraph\n\n",
"# If you want the plot to be interactive,\n",
"# you need the following package(s):\n",
"library(\"plotly\")\n",
"ggplotly(graph)\n\n",
"# If you would like to save your graph, you can use:\n",
"ggsave('my_graph.pdf', graph, width = ",
width_download(),
", height = ",
height_download(),
", units = 'cm')",
sep = ""
)
})
#####################################
#### GENERATE R-CODE FOR OUTPUT #####
#####################################
output$download_plot_PDF <- downloadHandler(
filename <- function() {
paste("Figure_ggplotGUI_", Sys.time(), ".pdf", sep = "")
},
content <- function(file) {
df <- df_shiny()
p <- eval(parse(text = string_code()))
ggsave(file, p, width = width_download(),
height = height_download(), units = "cm")
},
contentType = "application/pdf" # MIME type of the image
)
# End R-session when browser closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
}
library(ggplotgui)
ggplot_shiny(iris)
library(ggplotgui)
ggplot_shiny(iris)
library(shiny)
ggplot_shiny(iris)
library(ggplotgui)
library(shiny)
ggplot_shiny(iris)
shiny::runApp('ESTADISTICA/PRACTICAS/R Shiny/estructura')
shiny::runApp('ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
sptdf
#continua con validacion cruzada|||||||||||||||||||||||||||||||||||||||||
sptdf$varprom <- round(ED[,2],2)
setwd("~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/App_proyecto3")
var_names <- c("Temperatura Ambiental Promedio",
"Humedad Relativa Promedio",
"Radiacion Solar Difusa Promedio",
"Radiacion Solar Global Promedio",
"Temperatura de Suelo Promedio a nivel 1",
"Direccion del Viento Promedio",
"Velocidad del viento Promedio")
st_names <- c("Alao", "Atillo",
"Cumanda", "Espoch",
"Matus", "Multitud",
"Quimiag","San Juan",
"Tixan","Tunshi",
"Urbina")
dat1 <- read.xlsx(xlsxFile = "data/X1_imputada.xlsx",
sheet = 1, detectDates = TRUE)
fecha1 <- as.POSIXct(paste(dat1[,2], dat1[,3]), format="%Y-%m-%d %H:%M:%S",tz = "UTC")
dat1 <- data.frame(fecha1,sapply(dat1[,4:length(dat1)], as.numeric))
dataX1 <- as.tibble(dat1)
colnames(dataX1) <- c("fecha",st_names)
#se filtra desde el widget
fechas <- c("2014-01-01","2014-01-07")
horas <- c("00:00:00","23:00:00")
date_time <- paste(fechas,horas)
datafil <-  dataX1 %>%
dplyr::filter(fecha1 >= as.POSIXct(date_time[1], tz="UTC") &
fecha1 <= as.POSIXct(date_time[2], tz="UTC"))
#al ejecutar shiny esto va cambiando debido a que se usaron las mismas variables
ED <- profiling_num(datafil[2:length(datafil)])
library(funModeling)
#al ejecutar shiny esto va cambiando debido a que se usaron las mismas variables
ED <- profiling_num(datafil[2:length(datafil)])
coord <- arrange(coord,coord[,1])
sptdf <- coord
#detach("package:gstat", unload = TRUE)
#detach("package:automap", unload = TRUE)
coordinates(sptdf) <- ~X+Y#asignar coordenadas espaciales
utm <- "+proj=utm +zone=17 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
#Asignar sistema de referencia
proj4string(sptdf) <- utm
#puntos espaciales de promedio de un periodo de cada estacion
sptdf$varprom <- round(ED[,2],2)
thiessen.cv.d <- krige.cv(varprom ~ 1, sptdf,nmax = 1)
idw.cv.d <- krige.cv(varprom ~ 1, sptdf)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
PREC.ve.d <- gstat::variogram(log1p(varprom)~1, sptdf)
plot(PREC.ve.d, pl = T)
# variograma inicial
#variog
PREC.vi.d <- vgm(nugget=0, model=c("Exp", "Sph", "Gau", "Mat"),
range=sqrt(diff(sptdf@bbox["X",])^2 +
diff(sptdf@bbox["Y",])^2)/4,
psill=var(log1p(sptdf$varprom)))
PREC.vt.d <- fit.variogram(PREC.ve.d, model=PREC.vi.d)
plot(PREC.ve.d, pl = T, model = PREC.vt.d)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
thiessen.cv.d <- krige.cv(varprom ~ 1, sptdf,nmax = 1)
idw.cv.d <- krige.cv(varprom ~ 1, sptdf)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d$var1.pred
ok.cv.d
log1p(sptdf$varprom)
ds <- sapply(ok.cv.d@data,expm1)
ds
ok.cv.d@data
ok.cv.d <- sapply(ok.cv.d@data,expm1)
ok.cv.d@data
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d@data <- sapply(ok.cv.d@data,expm1)
ok.cv.d@data
ok.cv.d$var1.var <- expm1(ok.cv.d$var1.pred)
ok.cv.d$var1.pred <- expm1(ok.cv.d$var1.pred)
ok.cv.d$var1.var <- expm1(ok.cv.d$var1.pred)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d$var1.pred <- expm1(ok.cv.d$var1.pred)
ok.cv.d$var1.var <- expm1(ok.cv.d$var1.pred)
ok.cv.d@data
ok.cv.d$observed <- expm1(ok.cv.d$observed)
ok.cv.d@data
ok.cv.d$residual <- expm1(ok.cv.d$residual)
ok.cv.d@data
expdata <- ok.cv.d@data
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d$var1.pred <- expm1(ok.cv.d$var1.pred)
ok.cv.d@data
ok.cv.d$var1.pred-sptdf$varprom
#correlación
par(mfrow=c(1,3))
print(plot(var1.pred~observed,thiessen.cv.d, main="Thiessen"), split=c(1,1,3,1), more=TRUE)
print(plot(var1.pred~observed,idw.cv.d, main="IDW"), split=c(2,1,3,1), more=TRUE)
print(plot(var1.pred~obs,ok.cv.d, main="OK"), split=c(3,1,2,1), more=FALSE)
ok.cv.d$obs <- sptdf$varprom
print(plot(var1.pred~obs,ok.cv.d, main="OK"), split=c(3,1,2,1), more=FALSE)
ok.cv.d$var1.pred
#correlación, idealmente 1
c1 <- cor(thiessen.cv.d$var1.pred,thiessen.cv.d$observed)
c2 <- cor(idw.cv.d$var1.pred,idw.cv.d$observed)
c3 <- cor(ok.cv.d$var1.pred,ok.cv.d$obs)
ct <- c(c1,c2,c3)
ct
#media de residuos, idealmente 0
m1 <- mean(thiessen.cv.d$residual)
m2 <- mean(idw.cv.d$residual)
m3 <- mean(ok.cv.d$residual)
mt <- c(m1,m2,m3)
#Desviaciones estandar del error de interpolación (residuos). Idealmente pequeño
de1 <- sd(thiessen.cv.d$residual)
de2 <- sd(idw.cv.d$residual)
de3 <- sd(ok.cv.d$residual)
det <- c(de1,de2,de3)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d@data
var(ok.cv.d$var1.pred)
ok.cv.d <- krige.cv(log1p(varprom) ~ 1, locations = sptdf, model = PREC.vt.d)
ok.cv.d$var1.pred[1]
var(ok.cv.d$var1.pred[1],ok.cv.d$var1.pred[1])
var(ok.cv.d$var1.pred[1],ok.cv.d$var1.pred[2])
var(c(ok.cv.d$var1.pred[1],ok.cv.d$var1.pred[2]))
ok.cv.d@data
var(c(ok.cv.d$var1.pred[1],ok.cv.d$var1.pred[2]))
ok.cv.d$var1.pred <- expm1(ok.cv.d$var1.pred)
ok.cv.d$var1.var <- expm1(ok.cv.d$var1.pred)
ok.cv.d$observed <- expm1(ok.cv.d$observed)
ok.cv.d$residual <- expm1(ok.cv.d$residual)
ok.cv.d$residual <- ok.cv.d$observed-ok.cv.d$var1.pred
expdata <- ok.cv.d@data
ok.cv.d$obs <- sptdf$varprom
#correlación
par(mfrow=c(1,3))
print(plot(var1.pred~observed,thiessen.cv.d, main="Thiessen"), split=c(1,1,3,1), more=TRUE)
print(plot(var1.pred~observed,idw.cv.d, main="IDW"), split=c(2,1,3,1), more=TRUE)
print(plot(var1.pred~obs,ok.cv.d, main="OK"), split=c(3,1,2,1), more=FALSE)
met <- c("Thiessen","IDW","OK")
#correlación, idealmente 1
c1 <- cor(thiessen.cv.d$var1.pred,thiessen.cv.d$observed)
c2 <- cor(idw.cv.d$var1.pred,idw.cv.d$observed)
c3 <- cor(ok.cv.d$var1.pred,ok.cv.d$obs)
ct <- c(c1,c2,c3)
#media de residuos, idealmente 0
m1 <- mean(thiessen.cv.d$residual)
m2 <- mean(idw.cv.d$residual)
m3 <- mean(ok.cv.d$residual)
mt <- c(m1,m2,m3)
#Desviaciones estandar del error de interpolación (residuos). Idealmente pequeño
de1 <- sd(thiessen.cv.d$residual)
de2 <- sd(idw.cv.d$residual)
de3 <- sd(ok.cv.d$residual)
det <- c(de1,de2,de3)
boxplot(thiessen.cv.d$residual, idw.cv.d$residual, ok.cv.d$residual, main="Thiessen, IDW, OK")
# MSPE (mean square predictor error), idealmente pequeño
MSPE1 <- mean(thiessen.cv.d$residual^2)
MSPE2 <- mean(idw.cv.d$residual^2)
MSPE3 <- mean(ok.cv.d$residual^2)
MSPET <- c(MSPE1,MSPE2,MSPE3)
#Error medio cuadrático (RMSE) es una medida general. Idealmente pequeño
RMSE1 <- sqrt(sum(thiessen.cv.d$residual^2)/length(thiessen.cv.d$residual))
RMSE2 <- sqrt(sum(idw.cv.d$residual^2)/length(idw.cv.d$residual))
RMSE3 <- sqrt(sum(ok.cv.d$residual^2)/length(ok.cv.d$residual))
RMSET <- c(RMSE1,RMSE2,RMSE3)
#Varianza de residuos, idealmente cercanos a cero
var1 <- var(thiessen.cv.d$residual, na.rm=T)
var2 <- var(idw.cv.d$residual, na.rm=T)
var3 <- var(ok.cv.d$residual, na.rm=T)
vart <- c(var1 ,var2 ,var3 )
# Cantidad de variación explicada por el modelo en cada método, idealmente cercano a 100
VE1 <- (1-var(thiessen.cv.d$residual, na.rm=T)/var(sptdf$varprom))*100
VE2 <- (1-var(idw.cv.d$residual, na.rm=T)/var(sptdf$varprom))*100
VE3 <- (1-var(ok.cv.d$residual, na.rm=T)/var(sptdf$varprom))*100
VET <- c(VE1,VE2,VE3)
tbl <- data.frame(Metodo=met,correlacion=ct,media=mt,varianza=vart,desviacion=det,MSPE=MSPET,RMSE=RMSET,Var.Explicada=VET)
tbl
ok.cv.d@data
thiessen.cv.d @data
var(thiessen.cv.d$residual, na.rm=T)
18/100
tbl <- data.frame(Metodo=met,correlacion=ct,media=mt,varianza=vart,desviacion=det,MSPE=MSPET,RMSE=RMSET,Var.Explicada=VET)
tbl
var(thiessen.cv.d$residual, na.rm=T)/mean(sptdf$varprom)
var(thiessen.cv.d$residual, na.rm=T)/var(sptdf$varprom)
var(thiessen.cv.d$residual)/var(sptdf$varprom)
1-var(thiessen.cv.d$residual)/var(sptdf$varprom)
1-var(thiessen.cv.d$residual)/var(sptdf$varprom)*100
1-var(thiessen.cv.d$residual)/var(sptdf$varprom)*100
(1-var(thiessen.cv.d$residual)/var(sptdf$varprom))*100
var(idw.cv.d$residual)/var(sptdf$varprom)
sum(idw.cv.d$residual)
thiessen.cv.d$var1.pred
thiessen.cv.d$observed
sptdf$varprom
var(thiessen.cv.d$residual, na.rm=T)
mean(thiessen.cv.d$residual, na.rm=T)
mean(thiessen.cv.d$residual)
length(thiessen.cv.d$var1.pred)
idw.cv.d$var1.pred
idw.d
#Inverso de la distancia (idw)|||||||||||||||||||||||||||||||||||||||||||
sptdf_grid  <- spsample(parro_chimb, "regular", n=50000)
sptdf_grid = spsample(parro_chimb, type = "regular", cellsize = c(1000,1000))
gridded(sptdf_grid) = TRUE
proj4string(sptdf_grid) <- proj4string(sptdf)
idw.d = idw(varprom ~ 1, sptdf, sptdf_grid)
spplot(idw.d, "var1.pred", asp=1,
col.regions=gray(seq(1,0.1,l=30)),sp.layout = list(pts.s),main="IDW")
idw.d
idw.cv.d$var1.pred
idw.d
mean(idw.d)
mean(idw.d$var1.pred)
mean(idw.cv.d$var1.pred)
thiessen.d = gstat::krige(varprom ~ 1, sptdf, sptdf_grid, nmax = 1)
mean(thiessen.d$var1.pred)
mean(thiessen.cv.d$var1.pred)
thiessen.d$var1.pred
thiessen.cv.d$var1.pred
sptdf$varprom
runApp('~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
runApp('~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))
}
v <- variogram(zinc ~ 1, meuse)
m <- fit.variogram(v, vgm(c("Exp", "Sph")))
plot_variogram(v, m)
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))
}
v <- variogram(zinc ~ 1, meuse)
meuse
data(meuse)
meuse
v <- variogram(zinc ~ 1, meuse)
data(meuse)
summary(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- CRS("+init=epsg:28992")
v <- variogram(zinc ~ 1, meuse)
m <- fit.variogram(v, vgm(c("Exp", "Sph")))
plot_variogram(v, m)
sptdf
sptdf$varprom <- ED
ED[,2]
sptdf$varprom <- ED[,2]
v <- variogram(varprom ~ 1, sptdf)
m <- fit.variogram(v, vgm(c("Exp", "Sph")))
plot_variogram(v, m)
m <- fit.variogram(v, vgm(c("Exp", "Sph","Gauss")))
plot_variogram(v, m)
v <- variogram(varprom ~ 1, sptdf)
m <- fit.variogram(v, vgm(c("Exp", "Sph","Gauss")))
plot_variogram(v, m)
m <- fit.variogram(v, vgm(c("Exp", "Sph","Gau")))
plot_variogram(v, m)
v <- variogram(varprom ~ 1, sptdf)
m <- fit.variogram(v, vgm(c("Exp", "Sph","Gau")))
plot_variogram(v, m)
sptdf@bbox
v <- variogram(varprom ~ X+Y, sptdf)
m <- fit.variogram(v, vgm(c("Exp", "Sph","Gau")))
plot_variogram(v, m)
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = "Vaariograma",x="",y="")
}
plot_variogram(v, m)
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = "Variograma",x="Distancia",y="SemiVarianza")
}
plot_variogram(v, m)
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = "Variograma",x="Distancia",y="SemiVarianza")+
theme_bw()
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = "Variograma",x="Distancia",y="SemiVarianza")+
theme_bw()
}
plot_variogram(v, m)
plot_variogram <- function(v, m) {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = "Variograma",x="Distancia",y="Semi-Varianza")+
theme_bw()
}
plot_variogram(v, m)
plot_variogram <- function(v, m,vname="") {
preds = variogramLine(m, maxdist = max(v$dist))
ggplot() +
geom_point(data = v, aes(x = dist, y = gamma, size=np)) +
geom_line(data = preds, aes(x = dist, y = gamma))+
labs(title = paste0("Variograma\n",vname),x="Distancia",y="Semi-Varianza")+
theme_bw()
}
plot_variogram(v, m)
plot_variogram(v, m,"temperatura")
runApp('~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
?merge
runApp()
runApp('~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
library(dplyr)
library(tidyr)
library(ggplot2)
mutate(df, i = row_number()) %>%
gather(key, val, -i) %>%
mutate(pane = gsub("[a-z]", "", key),
key = gsub("[^a-z]", "", key)) %>%
spread(key, val) %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
facet_wrap(~pane)
mutate(df, i = row_number()) %>%
gather(key, val, -i) %>%
mutate(pane = gsub("[a-z]", "", key),
key = gsub("[^a-z]", "", key)) %>%
spread(key, val) %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
facet_wrap(~pane)
mutate_(df, i = row_number()) %>%
gather(key, val, -i) %>%
mutate(pane = gsub("[a-z]", "", key),
key = gsub("[^a-z]", "", key)) %>%
spread(key, val) %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
facet_wrap(~pane)
mutate_(df, i = row_number()) %>%
gather(key, val, -i) %>%
mutate(pane = gsub("[a-z]", "", key),
key = gsub("[^a-z]", "", key)) %>%
spread(key, val) %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
facet_wrap(~pane)
mutate(df, i = row_number())
i=4
mutate(df, i = row_number()) %>%
gather(key, val, -i) %>%
mutate(pane = gsub("[a-z]", "", key),
key = gsub("[^a-z]", "", key)) %>%
spread(key, val) %>%
ggplot(aes(x=x,y=y)) +
geom_point() +
facet_wrap(~pane)
row_number()
iris
ggplot(iris, aes(x =Sepal.Length, y = Petal.Length)) +
geom_boxplot()
ggplot(iris, aes(x =Sepal.Length, y = Petal.Length)) +
geom_point()
ggplot(iris, aes(x =Sepal.Length, y = Petal.Length)) +
geom_point()+
facet_wrap(~ Species, scales="free",ncol = 4)
facet_wrap(~ Species, scales="free",ncol = 4)+
ggplot(iris, aes(x =Sepal.Length, y = Petal.Length)) +
geom_point()+
facet_wrap(~ Species, scales="free",ncol = 4)+
ylab(input$var_sel2) + xlab("Distribución de los Residuos")+
theme(text = element_text(size=16),
axis.text.x = element_text(size=rel(1.3)),
axis.text.y = element_text(size=rel(1.3)),
strip.text.x = element_text(size=rel(2)),
strip.text.y = element_text(size=rel(2)))
ggplot(iris, aes(x =Sepal.Length, y = Petal.Length)) +
geom_point()+
facet_wrap(~ Species, scales="free",ncol = 4)+
ylab("temperatura") + xlab("Distribución de los Residuos")+
theme(text = element_text(size=16),
axis.text.x = element_text(size=rel(1.3)),
axis.text.y = element_text(size=rel(1.3)),
strip.text.x = element_text(size=rel(2)),
strip.text.y = element_text(size=rel(2)))
runApp('~/ESTADISTICA/TRABAJO DE INTEGRACION CURRICULAR/1ER PARCIAL/Proyecto_Version4')
shiny::runApp()
install.packages(c("broom", "conquer", "cpp11", "crayon", "dash", "dendextend", "fda", "fields", "future", "gert", "gmp", "gsl", "highfrequency", "labelled", "microbenchmark", "nloptr", "perry", "sessioninfo", "spatstat.core", "uuid", "V8"))
update()
update(R)
shiny::runApp()
runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Actualizar')
runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Actualizar')
runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Actualizar')
runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Actualizar')
runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Actualizar')
shiny::runApp('~/ESTADISTICA/PRACTICAS/R Shiny/Nueva carpeta/Proyecto_AED_AEDE')
